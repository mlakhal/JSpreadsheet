/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
}
PARSER_BEGIN(Evaluateur)
package Analyseur;
import javax.swing.*;
import java.io.*;
import java.awt.event.*;
import java.awt.*;
import java.util.ArrayList;
import SpreadSheet.*;

public class Evaluateur {
	
	public static double resultParsing ;
	static Evaluateur parser = null;
	static SpreadSheet _sps;
	
	
    public static void Evaluer(String exp,int i, SpreadSheet sps) {
        try {
        	java.io.StringReader sr = new java.io.StringReader( exp );
			java.io.Reader r = new java.io.BufferedReader( sr );	
			if(i == 0){
				parser = new Evaluateur( r );
			}
			else{
				parser.ReInit(r);
			}		
			_sps = sps;	
			resultParsing = parser.S();
        } catch (Throwable e) {
           JFrame _frame = new JFrame("Erreur");
           JOptionPane.showMessageDialog(_frame, "La cellule est vide!",
				      "avertissement",
				      JOptionPane.ERROR_MESSAGE);
		   resultParsing =-1;
        }
    }
}

PARSER_END(Evaluateur)

SKIP:  { " " | "\t"  | "\r"                    }
TOKEN: { <PO: "(">
	 | <PF: ")">
	 | <PLUS: "+">
	 | <MOINS: "-">
	 | <MUL: "*"> 
	 | <DIV: "/"> 
	 | <PV: ";">}

/* Opérateur logiques */
TOKEN :
{
	< EQUAL : "==">
	| <LESS : "<">
	| <GT : ">">
	| <LEQ : "<=">
	| <GEQ : ">="> 
	| <DIF : "!=">
}


/* Fonctions Mathematiques */
TOKEN :
{
	< SUM : "somme">
	| <PROD : "produit">
	| <MOY : "moyenne">
	| <SIN : "sin">
	| <COS : "cos">
	| <TAN : "tan">
	| <LOG : "log">
	| <LN : "ln">
	| <POW : "puissance">
	| <SQRT : "rac">
	| <ABS : "abs">
}

/* Fonctions Statistiques */
TOKEN :
{
	< VAR : "var">
	| <E : "esperance">
	| <MIN : "min">
	| <MAX : "max">
	| <EcT: "ecartType">
}

/* Fonctions Logiques */
TOKEN :
{
	< AND : "and">
	| <OR : "or">
	| <NOT : "not">
	| <SI : "si">
	| <VRAI : "vrai">
	| <FAUX : "faux">
}

TOKEN :
{
  < NOMBRE : < DIGITS > |  < DIGITS > "." < DIGITS >>
| < #DIGITS : (["0" - "9"])+ >
| < #LETTRE : ["A" - "Z"] >
| <Cellule : (<LETTRE>)+(<DIGITS>)+>
}


/* S --> E<EOF> */

double S(): {double res;}
{
  res=E() <EOF> {return res;}
}


double E(): {double res1; 
	double res2;}
{
	res1 = T() 
	(
    <PLUS>
    res2 = T()
    { res1 +=res2; }
  |
    <MOINS>
    res2 = T()
    { res1 -= res2; }
  )*
	{return res1;}
}

double T(): {double res1; 
	double res2;}
{
	res1 = F() 
	(
    <MUL>
    res2 = F()
    { res1 *=res2; }
  |
    <DIV>
    res2 = F()
    { res1 /= res2; }
  )*
	{return res1;}
}

double F(): {double res;}
{
	<MOINS> res = ELEM()
	|
	<PLUS> res = ELEM()
	| 
	res = ELEM()
	{return res;}
}

double ELEM(): {double res;}
{
	<PO> res = E() <PF>
	| 
	res = EXP()
	{return res;}
}

double EXP(): {double x; Token n;
	int row;
	int column;}
{
	n = <NOMBRE> { return Double.parseDouble(n.image);}
	| n = <Cellule>
	{
		row =CellString.getColNum(CellString.getRowIndex(n.image)[0])-1;
        column = Integer.parseInt(CellString.getColumnName(n.image)[1])-1;
		SheetCell sc = (SheetCell)_sps.getValueAt(row, column);
       x= Double.parseDouble((String)sc.getValue());
       return x;
	} 
	| x = MATH() { return x;}
	| x = STAT() { return x;}
	| x = LOGIQUE() { return x;}
}

double STAT():{
	ArrayList<Double > List = new ArrayList<Double >();
  	double ex;
  	double var;}
{
	(
	<VAR> < PO> List = ListeArg() <PF> 
	{
	  ex = 0; 
	  var = 0;
      for(int i=0 ; i<List.size() ; i++) ex = ex + List.get(i);
      ex /= List.size();
      for(int i=0 ; i<List.size() ; i++) var += (List.get(i) - ex)*(List.get(i) - ex);
      return var/(List.size()-1);
    }
    |
    <E> < PO> List = ListeArg() <PF> 
	{
	  ex = 0; 
	  for(int i=0 ; i<List.size() ; i++) ex = ex + List.get(i);
      ex /= List.size();
      return ex;
    }
    |
    <EcT> < PO> List = ListeArg() <PF> 
	{
	  ex = 0; 
	  var = 0;
      for(int i=0 ; i<List.size() ; i++) ex = ex + List.get(i);
      ex /= List.size();
      for(int i=0 ; i<List.size() ; i++) var += (List.get(i) - ex)*(List.get(i) - ex);
      return Math.sqrt(var);
    }
    |
    <MAX> < PO> List = ListeArg() <PF> 
	{
	  ex = List.get(0);
      for(int i=1 ; i<List.size() ; i++) {
      	if ( ex < List.get(i) ) ex = List.get(i);  
      }
      return ex;
	}
    |
    <MIN> < PO> List = ListeArg() <PF> 
	{
	  ex = List.get(0);
      for(int i=1 ; i<List.size() ; i++) {
      	if ( ex > List.get(i) ) ex = List.get(i);  
      }
      return ex;
	}
    )
}

double LOGIQUE():{Token n;
	ArrayList<Double > List = new ArrayList<Double >();
  	double res;
}
{
	(
	<AND> < PO> List = ListeArg() <PF> 
	{
      res = 1;
      for(int i=0 ; i<List.size() ; i++) { 
      	if ( List.get(i) != 0 && List.get(i) != 1 ){
      		return -1;
      	}else{
      		      if ( List.get(i) == 0 ){
      		      	return 0;	
      		      }	
      	}
      }  
      return res;
    }
    |
    <OR> <PO> List = ListeArg() <PF> 
    {
      res = 0;
      for(int i=0 ; i<List.size() ; i++) { 
      	if ( List.get(i) != 0 && List.get(i) != 1 ){
      		return -1;
      	}else{
      		      if ( List.get(i) == 1 ){
      		      	return 1;	
      		      }	
      	}
      }  
      return res;
    }
    |
    <NOT> <PO> res = Arg() <PF> 
    {
      	if ( res != 0 && res != 1 ){
      		return -1;
      	}else{
      		      if ( res == 1 ){
      		      	return 0;	
      		      }else{
      		      	return 1;
      		      }
      	}  
    }
    | 
    n = <VRAI> { return 1;}
	| 
	n = <FAUX> {return 0;}
    |
    res = FonctionSi() {return res;}
	)
}

double FonctionSi():{double res;
  	double v1;
  	double v2;}
{
	(
		<SI> <PO> <PO> res = Condition() <PF> <PV> v1 = Arg() <PV> v2 = Arg() <PF> 
  		{
      		if ( res == 1) {return v1;}
      		if ( res == 0) {return v2;}  
    	}
	)
}

double Condition():{double res = -1;
	double v1;
	double v2;}
{
	(
		v1 = Arg() 
		(<LESS> v2 = Arg()
		{
			if ( v1 < v2 ) {return 1;}  
			else {return 0;}
		}
		|
		<GT> v2 = Arg()
		{
			if ( v1 > v2 ) {return 1;}  
			else {return 0;}
		}
		|
		<LEQ> v2 = Arg()
		{
			if ( v1 <= v2 ) {return 1;}  
			else {return 0;}
		}
		|
		<GEQ> v2 = Arg()
		{
			if ( v1 >= v2 ) {return 1;}  
			else {return 0;}
		}
		|
		<DIF> v2 = Arg()
		{
			if ( v1 != v2 ) {return 1;}  
			else {return 0;}
		}
		|
		<EQUAL> v2 = Arg()
		{
			if ( v1 == v2 ) {return 1;}  
			else {return 0;}
		}
		)*
		{
			if (res == -1) {return v1;}
		}
	)
}

double MATH():{
	ArrayList<Double > List = new ArrayList<Double >();
  	double res;
  	double p;}
{
	(
	<SIN> <PO> res = Arg() <PF>
	{
		res = Math.sin(res);
		return res;
	}
	|
	<COS> <PO> res = Arg() <PF>
	{
		res = Math.cos(res);
		return res;
	}
	|
	<TAN> <PO> res = Arg() <PF>
	{
		res = Math.tan(res);
		return res;
	}
	|
	<LOG> <PO> res = Arg() <PF>
	{
		res = Math.log(res)/10;
		return res;
	}
	|
	<LN> <PO> res = Arg() <PF>
	{
		res = Math.log(res);
		return res;
	}
	|
	<SQRT> <PO> res = Arg() <PF>
	{
		res = Math.sqrt(res);
		return res;
	}
	|
	<ABS> <PO> res = Arg() <PF>
	{
		res = Math.abs(res);
		return res;
	}
	|
	<POW> <PO> res = Arg() <PV> p = Arg() <PF>
	{
		res =Math.pow(res,p);
		return res;
	}
	|
	<SUM> < PO> List = ListeArg() <PF> 
	{
      res = 0;
      for(int i=0 ; i<List.size() ; i++) res = res + List.get(i);
      return res;
    }
    |
    <PROD> < PO> List = ListeArg() <PF> 
	{
      res = 1;
      for(int i=0 ; i<List.size() ; i++) res = res * List.get(i);
      return res;
    }
    |
    <MOY> < PO> List = ListeArg() <PF> 
	{
      res = 0;
      for(int i=0 ; i<List.size() ; i++) res = res + List.get(i);
      return res/List.size();
    } 
    )
}

ArrayList<Double > ListeArg() throws NumberFormatException :
{
  ArrayList<Double > List = new ArrayList<Double >();
  double val=0;
}
{
    val = EXP()
    { List.add(val); }
    (
      <PV>
      val = EXP()
      { List.add(val); }
    )*
    { return List ; }
}

double Arg():{double res = 0;}
{
	res = E() {return res;}
}